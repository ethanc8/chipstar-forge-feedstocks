# yaml-language-server: $schema=https://raw.githubusercontent.com/prefix-dev/recipe-format/main/schema.json
context:
  version: 17.0.6
  major_ver: 17
  # major_ver: ${{ version.split(".")[0] }}
  # as of LLVM 17, we expect an "rc" suffix for the release candidates
  # extra: ${{ "git" if version.split(".")[-1] == "dev0" else ("rc" if version.split(".")[-1] not in "01234567" else "") }}
  extra: ${{ "" }}

recipe:
  name: llvm-package
  version: ${{ version }}

source:
  url: https://github.com/llvm/llvm-project/releases/download/llvmorg-${{ version | replace(".rc", "-rc") }}/llvm-project-${{ version | replace(".rc", "rc") }}.src.tar.xz
  sha256: 58a8818c60e6627064f312dbf46c02d9949956558340938b71cf731ad8bc0813
  patches:
    # - patches/intel-D47188-svml-VF.patch    # Fixes vectorizer and extends SVML support
    # - patches/expect-fastmath-entrypoints-in-add-TLI-mappings.ll.patch # adjusts test added in 10.0.0 for intel-D47188-svml-VF.patch effects
    # - patches/amd-roc-2.7.0.diff
    - patches/0001-pass-through-QEMU_LD_PREFIX-SDKROOT.patch
    # backports patch for issues with LLJIT, see
    # https://github.com/llvm/llvm-project/commit/122ebe3b500190b1f408e2e6db753853e297ba28
    - patches/0002-ORC-Use-EPC-bootstrap-symbols-to-communicate-eh-fram.patch

build:
  number: 2
  merge_build_and_host_envs: false

cache:
  requirements:
    build:
      - ${{ stdlib('c') }}
      - ${{ compiler('cxx') }}
      - cmake
      - ninja
      - python >=3
      - if: osx
        then: libcxx ${{ cxx_compiler_version }}
    host:
      - if: osx
        then: libcxx ${{ cxx_compiler_version }}
      # needs aarch/ppc/arm (re)build of conda-forge/backtrace-feedstock
      - if: unix and x86
        then: backtrace
      - libxml2
      - zlib
      - zstd
  build:
    script: build

outputs:
  # Contains everything
  - package:
      name: llvmdev
    build:
      script: install_llvm
    requirements:
      build:
        - ${{ stdlib('c') }}
        - ${{ compiler('cxx') }}
        - cmake
        - ninja
        - python >=3
        - if: win
          then: m2-sed
        - if: osx
          then: libcxx ${{ cxx_compiler_version }}
      host:
        - if: osx
          then: libcxx ${{ cxx_compiler_version }}
        - ${{ pin_subpackage("libllvm" + major_ver, exact=True) }}
        - if: win
          then: ${{ pin_subpackage("libllvm-c" + major_ver, exact=True) }}
        - ${{ pin_subpackage("llvm-tools", exact=True) }}
        - libxml2
        - zlib
        - zstd
      run:
        - ${{ pin_subpackage("libllvm" + major_ver, exact=True) }}
        - if: win
          then: ${{ pin_subpackage("libllvm-c" + major_ver, exact=True) }}
        - ${{ pin_subpackage("llvm-tools", exact=True) }}
        - if: osx
          then: libcxx >=${{ cxx_compiler_version }}
      run_constraints:
        - llvm        ${{ version }}
        - llvm-tools  ${{ version }}
        - clang       ${{ version }}
        - clang-tools ${{ version }}
    tests:
      - requirements:
          run:
            - if: win
              then: ripgrep
        script:
          - if: not win
            then: $PREFIX/bin/llvm-config --libs
          - if: not win
            then: test -f $PREFIX/include/llvm/Pass.h
          - if: not win
            then: test -f $PREFIX/lib/libLLVMCore.a
          - if: not win
            then: $PREFIX/libexec/llvm/not false
          - if: not win
            then: $PREFIX/bin/llvm-nm --help
          - if: win
            then: if not exist %LIBRARY_INC%\\llvm\\Pass.h exit 1
          - if: win
            then: "if not exist \"%LIBRARY_PREFIX%\"\\\\libexec\\llvm\\not.exe exit 1"
          - if: win
            then: "if not exist \"%LIBRARY_BIN%\"\\\\llvm-nm.exe exit 1"
          - if: win
            then: llvm-nm.exe --help
          - if: win
            then: "rg -e \"INTERFACE_LINK_LIBRARIES\\s\\\"\\$ENV\\{VSINSTALLDIR\\}[/\\w\\s]+/diaguids\\.lib\" %LIBRARY_LIB%\\cmake\\llvm\\LLVMExports.cmake"
  # Contains the shared libraries. To make different LLVM libraries co-installable
  # soversion is appended to the package name.
  - package:
      name: libllvm${{ major_ver }}
    build:
      script: install_llvm
    requirements:
      build:
        - ${{ stdlib('c') }}
        - ${{ compiler('cxx') }}
        - if: not win
          then: ninja
        - if: not win
          then: cmake
        - if: not win
          then: python >=3
        - if: osx
          then: libcxx ${{ cxx_compiler_version }}
      host:
        - if: osx
          then: libcxx ${{ cxx_compiler_version }}
        - libxml2
        - zlib
        - zstd
      run:
        - if: osx
          then: libcxx >=${{ cxx_compiler_version }}
    tests:
      - script:
          - if: linux
            then: test -f $PREFIX/lib/libLLVM-${{ major_ver }}${{ extra }}.so
          - if: osx
            then: test -f $PREFIX/lib/libLLVM-${{ major_ver }}${{ extra }}.dylib
  # This is a meta package so that people can use the latest libllvm and also
  # for run_exports
  - package:
      name: llvm
    build:
      script:
        - ;
    requirements:
      build:
      host:
        - if: not win
          then: ${{ pin_subpackage("libllvm" + major_ver, exact=True) }}
        - libxml2
        - zlib
        - zstd
        - cmake
        - ninja
      run:  # [not win]
        - if: not win
          then: ${{ pin_subpackage("libllvm" + major_ver, exact=True) }}
      run_exports:
      run_constraints:
        - llvmdev     ${{ version }}
        - llvm-tools  ${{ version }}
        - clang       ${{ version }}
        - clang-tools ${{ version }}
    tests:
      - script:
          - "echo \"Hello World!\""
  # Contains LLVM tools
  - package:
      name: llvm-tools
    build:
      script: install_llvm
    requirements:
      build:
        - ${{ stdlib('c') }}
        - ${{ compiler('cxx') }}
        - cmake
        - ninja
        - python >=3
        - if: osx
          then: libcxx ${{ cxx_compiler_version }}
      host:
        - if: osx
          then: libcxx ${{ cxx_compiler_version }}
        - ${{ pin_subpackage("libllvm" + major_ver, exact=True) }}
        - libxml2
        - zlib
        - zstd
      run:
        - ${{ pin_subpackage("libllvm" + major_ver, exact=True) }}
      run_constraints:
        - llvm        ${{ version }}
        - llvmdev     ${{ version }}
        - clang       ${{ version }}
        - clang-tools ${{ version }}
    tests:
      - script:
          - if: not win
            then: $PREFIX/bin/llc -version
          - if: win
            then: "if not exist \"%LIBRARY_BIN%\"\\\\llc.exe exit 1"
          - if: win
            then: llc -version
  # Contains LLVM-C shared library
  - package:
      name: libllvm-c${{ major_ver }}
    build:
      # not supported on linux, see
      # https://github.com/llvm/llvm-project/blob/llvmorg-16.0.6/llvm/tools/llvm-shlib/CMakeLists.txt#L82-L85
      # osx currently fails as well, see https://github.com/llvm/llvm-project/issues/64657
      skip:
        - not win
      # activate_in_script: true
      script: install_llvm
    requirements:
      build:
        - ${{ stdlib('c') }}
        - ${{ compiler('cxx') }}
        - cmake
        - ninja
        - if: osx
          then: libcxx ${{ cxx_compiler_version }}
      host:
        - if: osx
          then: libcxx ${{ cxx_compiler_version }}
        - ${{ pin_subpackage("libllvm" + major_ver, exact=True) }}
        - libxml2
        - zlib
        - zstd
      run_exports:
      run_constraints:
        - llvmdev ${{ version }}
    tests:
      - script:
          - if: osx
            then: test -f $PREFIX/lib/libLLVM-C.${{ major_ver }}.dylib
          - if: win
            then: if not exist %LIBRARY_BIN%\LLVM-C.dll exit 1
          - if: win
            then: if not exist %LIBRARY_LIB%\LLVM-C.lib exit 1
  - package:
      name: lit
    build:
      skip:
        - not linux64
      noarch: python
      script: python -m pip install llvm/utils/lit --no-deps -vv
      python:
        entry_points:
          - lit = lit.main:main
          - llvm-lit = lit.main:main
      # activate_in_script: true
    requirements:
      host:
        - python >=3
        - pip
      run:
        - python >=3
    tests:
      - python:
          imports:
            - lit
      - script:
          - lit -h
          - llvm-lit -h

about:
  license: Apache-2.0 WITH LLVM-exception
  license_file: llvm/LICENSE.TXT
  summary: Development headers and libraries for LLVM
  homepage: http://llvm.org/
  repository: https://github.com/llvm/llvm-project

extra:
  recipe-maintainers:
    - ethanc8
    # The following people maintain the equivalent conda-forge recipe, built with conda-build:
    # - JohanMabille
    # - inducer
    # - jakirkham
    # - mingwandroid
    # - SylvainCorlay
    # - isuruf
    # - timsnyder
    # - xhochy
    # - h-vetinari
  feedstock-name: llvmdev

